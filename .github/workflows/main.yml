name: Weibo Data Scraper

on:
  workflow_dispatch:  # Allows manual trigger
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  scrape-weibo:
    runs-on: ubuntu-latest

    services:
      xvfb:
        image: "selenium/standalone-chrome:latest"  # Use a Selenium Chrome container
        options: > 
          --shm-size 2g  # Shared memory size for Chrome

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager

      - name: Run Weibo scraper
        env:
          WEIBO_USERNAME: ${{ secrets.WEIBO_USERNAME }}
          WEIBO_PASSWORD: ${{ secrets.WEIBO_PASSWORD }}
        run: |
          python -c "
          from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.chrome.options import Options
          from webdriver_manager.chrome import ChromeDriverManager
          import time

          # Set up Selenium WebDriver with Chrome options
          options = Options()
          options.headless = True
          options.add_argument('--no-sandbox')
          options.add_argument('--disable-dev-shm-usage')
          driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

          try:
              # Open Weibo login page
              driver.get('https://weibo.com/login.php')
              time.sleep(2)  # Wait for page to load

              # Input username and password
              driver.find_element(By.ID, 'loginname').send_keys('${{ secrets.WEIBO_USERNAME }}')
              driver.find_element(By.NAME, 'password').send_keys('${{ secrets.WEIBO_PASSWORD }}')
              driver.find_element(By.XPATH, '//a[@action-type="btn_submit"]').click()
              time.sleep(5)  # Wait for login to process

              # Check if login was successful
              if '我的首页' in driver.page_source:
                  print('Login successful!')

                  # Search for a topic, e.g., "digital sovereignty" in Chinese
                  search_url = 'https://s.weibo.com/weibo?q=数字主权'
                  driver.get(search_url)
                  time.sleep(3)

                  # Scrape post data
                  posts = []
                  elements = driver.find_elements(By.CLASS_NAME, 'card-wrap')
                  for element in elements:
                      try:
                          text = element.find_element(By.CLASS_NAME, 'txt').text
                          posts.append({'text': text})
                      except:
                          continue

                  # Print collected posts
                  print('Collected Weibo posts:', posts)

              else:
                  print('Login failed.')
          
          finally:
              driver.quit()
          "
